name: PR comment

on:
  workflow_run:
    workflows: [CI]
#    branches: [main]
    types:
      - completed

#permissions:
#  pull-requests: write

jobs:
  add_comment:
    runs-on: ubuntu-latest
    name: Create testing summary comment
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
#      - name: Find Current Pull Request
#        id: findPr
#        uses: jwalton/gh-find-current-pr@v1.3.0
#        with:
#          state: open
#      - run: echo "Your PR is ${PR}"
#        if: success() && steps.findPr.outputs.number
#        env:
#          PR: ${{ steps.findPr.outputs.pr }}
#      - name: Find Comment
##        if: github.event_name == 'pull_request'
#        uses: peter-evans/find-comment@v2
#        id: fc
#        with:
#          issue-number: ${{ steps.findPr.outputs.pr }}
#          body-includes: Test summary report
#      - name: Create summary comment
#        uses: peter-evans/create-or-update-comment@v2
#        with:
#          comment-id: ${{ steps.fc.outputs.comment-id }}
#          issue-number: ${{ steps.findPr.outputs.pr }}
#          token: "${{ secrets.GITHUB_TOKEN }}"
#          body: |
#            Test summary report ðŸ“Š
#
#            | Spark version |    testing    |
#            |:-------------:|:-------------:|
#          edit-mode: replace





#  - name: "Download artifacts"
##    if: ${{ github.event.workflow_run.conclusion == 'success' }}
##    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
#    runs-on: ubuntu-latest
#    uses: actions/github-script@v6
#    with:
#      script: |
#        let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
#           owner: context.repo.owner,
#           repo: context.repo.repo,
#           run_id: context.payload.workflow_run.id,
#        });
#        let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
#          return artifact.name == "pr_number"
#        })[0];
#        let download = await github.rest.actions.downloadArtifact({
#           owner: context.repo.owner,
#           repo: context.repo.repo,
#           artifact_id: matchArtifact.id,
#           archive_format: 'zip',
#        });
#        let fs = require('fs');
#        fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_number.zip`, Buffer.from(download.data));
#
#  - name: 'Unzip artifact'
#    run: unzip pr_number.zip
#  on-success:
#    runs-on: ubuntu-latest
#    if: ${{ github.event.workflow_run.conclusion == 'success' }}
#    steps:
#      - run: echo 'The triggering workflow passed'
#  on-failure:
#    runs-on: ubuntu-latest
#    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
#    steps:
#      - run: echo 'The triggering workflow failed'
