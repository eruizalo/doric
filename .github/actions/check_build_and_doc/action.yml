name: "Check, build & doc üéØ"
description: "Check the code, build, testing & generate project documentation"

runs:
  using: "composite"
  steps:
    - name: "Printing environment"
      run: |
        echo ""
        echo "#####################################################"
        echo "#                                                   #"
        echo "#   Running action using $SPARK_VERSION [scope $SCOPE]"
        echo "#                                                   #"
        echo "#####################################################"
        echo ""
      shell: bash

#    - name: <DEBUG> Dump GitHub context
#      env:
#        GITHUB_CONTEXT: ${{ toJson(github) }}
#      run: |
#        echo "$GITHUB_CONTEXT"
#      shell: bash
#
#    - name: Get Current Job Log URL
#      uses: Tiryoh/gha-jobid-action@v0.1.0
#      id: jobs
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}
#        job_name: ${{ github.job }}
#
#    - name: Output Current Job Log URL
#      run: echo ${{ steps.jobs.outputs.html_url }}
#      shell: bash

      # SETUP & CACHE
    - uses: olafurpg/setup-scala@v13

    - uses: coursier/cache-action@v6
      with:
        extraKey: "${{ matrix.spark }}"

#      # CHECK CODE FORMAT
#    - name: Code Format
#      id: code_format
#      if: contains(env.SCOPE, 'test')
#      run: sbt -DsparkVersion=${{ env.SPARK_VERSION }} scalafmtCheckAll
#      shell: bash
#
#      # TESTING & COVERAGE
#    - name: Test & coverage üìã
#      id: test_coverage
#      if: steps.code_format.conclusion == 'success'
#      run: sbt -DsparkVersion=${{ env.SPARK_VERSION }} coverage +core/test coverageAggregate
#      shell: bash
#
#    - name: Test Summary
#      id: test_summary
#      if: ${{ success() && steps.test_coverage.conclusion == 'success' || failure() && steps.test_coverage.conclusion == 'failure' }}
#      uses: test-summary/action@v1
#      with:
#        paths: "./core/target/test-reports/**/TEST-*.xml"
#        output: "test-summary.md"
#
#    - name: Add 2 GitHub step summary
#      if: ${{ (success() || failure()) && steps.test_summary.conclusion == 'success' }}
#      shell: bash
#      run: cat test-summary.md >> $GITHUB_STEP_SUMMARY
#
#    - name: Add summary link
#      id: add_summary_link
#      if: ${{ (success() || failure()) && steps.test_summary.conclusion == 'success' }}
#      shell: bash
#      run: |
#        img=$(head -1 test-summary.md | perl -pe 's/(<.*?.>).*/$1/')
#        url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#        echo "| ${{ env.SPARK_VERSION }} | [${img}](${url}) |" > test-summary-${{ env.SPARK_VERSION }}.md
#        cat -e test-summary-${{ env.SPARK_VERSION }}.md
#
#    - name: Upload test summary
#      if: ${{ github.event_name == 'pull_request' && ((success() || failure()) && steps.add_summary_link.conclusion == 'success') }}
#      uses: actions/upload-artifact@v3
#      with:
#        name: "test-summary-${{ env.SPARK_VERSION }}.md"
#        path: "test-summary-${{ env.SPARK_VERSION }}.md"
#        if-no-files-found: error
#        retention-days: 1
#
#    - name: Publish coverage to codecov üìä
#      if: contains(env.SCOPE, 'uploadReport')
#      uses: codecov/codecov-action@v3
#      with:
#        files: ./target/scala-2.11/scoverage-report/scoverage.xml,./target/scala-2.12/scoverage-report/scoverage.xml,./target/scala-2.13/scoverage-report/scoverage.xml
#        fail_ci_if_error: true
#        verbose: false
#        flags: 'spark-${{ env.SPARK_VERSION }}.x'

      # CHECK DOCUMENTATION
    - name: Build the microsite üíª
#      if: startsWith(env.SPARK_VERSION, '2.4') != true
      if: contains(env.SCOPE, 'uploadDoc')
      run: sbt -DsparkVersion=${{ env.SPARK_VERSION }} +docs/mdoc
      shell: bash

    - name: Build the scaladocs üíª
      run: sbt -DsparkVersion=${{ env.SPARK_VERSION }} +core/doc
      shell: bash

      # UPLOAD DOCS

    - name: Prepare scaladocs
#      if: contains(env.SCOPE, 'uploadDoc')
      if: ${{ matrix.isRelease == 'release' }}
      id: prepare_docs
      run: |
        SCALA_VERSIONS=$(ls -d core/target/scala-*/)
        for scala_path in ${SCALA_VERSIONS}; do
          scala_version=$(basename ${scala_path})
          mkdir --parents --verbose spark-${{ env.SPARK_VERSION }}/${scala_version}/
          mv ${scala_path}/api/* spark-${{ env.SPARK_VERSION }}/${scala_version}/
        done
      shell: bash

    - name: Upload docs ‚¨ÜÔ∏è
      if: steps.prepare_docs.conclusion == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: "spark-${{ env.SPARK_VERSION }}"
        path: "spark-${{ env.SPARK_VERSION }}"
        if-no-files-found: error

      # CLEAN PROJECT BEFORE CACHE
    - name: Cleaning before cache üöØ
      if: ${{ always() }}
      uses: ./.github/actions/clean_cache
